const cron = require("node-cron");
const Reminder = require("../models/Reminder");
const sendEmail = require("./email"); // Nodemailer setup

// рд╣рд░ 5 рдорд┐рдирдЯ рдореЗрдВ рдЪреЗрдХ рдХрд░реЗрдЧрд╛ рдФрд░ рд░рд┐рдорд╛рдЗрдВрдбрд░ рднреЗрдЬреЗрдЧрд╛
cron.schedule("*/5 * * * *", async () => {
  try {
    const now = new Date();
    
    // ЁЯФН рд╕рднреА рдЕрдирд╕реЗрдВрдЯ рд░рд┐рдорд╛рдЗрдВрдбрд░реНрд╕ рдХреЛ рдвреВрдВрдвреЗрдВ
    const reminders = await Reminder.find({
      time: { $lte: now },
      isSent: false,
    }).populate("userId");

    console.log(`ЁЯФН Found ${reminders.length} reminders to send.`);

    for (const reminder of reminders) {
      if (reminder.userId && reminder.userId.email) {
        try {
          console.log(`ЁЯУй Sending email to: ${reminder.userId.email}`);

          await sendEmail({
            to: reminder.userId.email,
            subject: `ЁЯТК ${reminder.medicine} рдХрд╛ рд╕рдордп`,
            text: `рдирдорд╕реНрддреЗ ${reminder.userId.name},\nрдЖрдкрдХреА рджрд╡рд╛ ${reminder.medicine} (${reminder.dosage}) рдХрд╛ рд╕рдордп рд╣реЛ рдЧрдпрд╛ рд╣реИред`,
          });

          // тЬЕ рд░рд┐рдорд╛рдЗрдВрдбрд░ рдХреЛ рднреЗрдЬрд╛ рдЧрдпрд╛, isSent рдХреЛ true рдХрд░ рджреЗрдВ
          reminder.isSent = true;
          await reminder.save();

          console.log(`тЬЕ Reminder sent & updated for ${reminder.userId.email}`);
        } catch (emailError) {
          console.error(`тЭМ Email Send Error for ${reminder.userId.email}:`, emailError.message);
        }
      } else {
        console.warn(`тЪая╕П Reminder skipped: No valid email for user ${reminder.userId?.name || "Unknown"}`);
      }
    }
  } catch (error) {
    console.error("тЭМ Reminder Cron Job Error:", error);
  }
});
